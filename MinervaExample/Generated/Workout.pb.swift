// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Workout.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct WorkoutProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var workoutID: String {
    get { _workoutID ?? String() }
    set { _workoutID = newValue }
  }
  /// Returns true if `workoutID` has been explicitly set.
  public var hasWorkoutID: Bool { self._workoutID != nil }
  /// Clears the value of `workoutID`. Subsequent reads from it will return its default value.
  public mutating func clearWorkoutID() { self._workoutID = nil }

  public var userID: String {
    get { _userID ?? String() }
    set { _userID = newValue }
  }
  /// Returns true if `userID` has been explicitly set.
  public var hasUserID: Bool { self._userID != nil }
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  public mutating func clearUserID() { self._userID = nil }

  public var text: String {
    get { _text ?? String() }
    set { _text = newValue }
  }
  /// Returns true if `text` has been explicitly set.
  public var hasText: Bool { self._text != nil }
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  public mutating func clearText() { self._text = nil }

  public var calories: Int32 {
    get { _calories ?? 0 }
    set { _calories = newValue }
  }
  /// Returns true if `calories` has been explicitly set.
  public var hasCalories: Bool { self._calories != nil }
  /// Clears the value of `calories`. Subsequent reads from it will return its default value.
  public mutating func clearCalories() { self._calories = nil }

  public var dateTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get { _dateTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
    set { _dateTimestamp = newValue }
  }
  /// Returns true if `dateTimestamp` has been explicitly set.
  public var hasDateTimestamp: Bool { self._dateTimestamp != nil }
  /// Clears the value of `dateTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearDateTimestamp() { self._dateTimestamp = nil }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _workoutID: String?
  fileprivate var _userID: String?
  fileprivate var _text: String?
  fileprivate var _calories: Int32?
  fileprivate var _dateTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension WorkoutProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "WorkoutProto"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "workoutID"),
    2: .same(proto: "userID"),
    3: .same(proto: "text"),
    4: .same(proto: "calories"),
    5: .same(proto: "dateTimestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._workoutID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._calories) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._dateTimestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._workoutID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._calories {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._dateTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: WorkoutProto, rhs: WorkoutProto) -> Bool {
    if lhs._workoutID != rhs._workoutID { return false }
    if lhs._userID != rhs._userID { return false }
    if lhs._text != rhs._text { return false }
    if lhs._calories != rhs._calories { return false }
    if lhs._dateTimestamp != rhs._dateTimestamp { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}
